program ColdWar;

//@define SHOW_RASTER;
@define PLAY_MUSIC;

@donotremove cartAutostart
@donotremove initscreenshift

// Create images for eprom burning (for 16kB cartridge)
@exportprg2bin "coldwar.prg" "eprom2000.bin" $2000 $4000
@exportprg2bin "coldwar.prg" "eproma000.bin" $a000 $c000


var
	// Address of bitmap (screen and characters)
	@userdata $1000 $1FFF "VBM Bitmap"

	// Export sprites, tiles and font from FLUFF files (creates .bin files)
	@vbmexport	"res/sprites/sprites.flf" 	"export/sprite_carbody.bin"    0 	12	1	1
	@vbmexport	"res/sprites/sprites.flf" 	"export/sprite_wheel.bin"      80 	88	1	1
	@vbmexport	"res/sprites/sprites.flf" 	"export/sprite_ground.bin"     160	164	1	1
	@vbmexport	"res/sprites/sprites.flf" 	"export/sprite_updown.bin"     120	128	1	1
	@vbmexport	"res/sprites/sprites.flf" 	"export/sprite_letters.bin"    400	412	2	1
	@export		"res/char/font4x8.flf" 		"export/font4x8.bin"           0 	64

	// Memory addresses for sprites & tiles
	const addrMusic:	address = $be00;
	const addrCarBody:	address = $ba00;
	const addrWheel:	address = addrCarBody + 96;
	const addrGround:	address = addrWheel + 64;
	const addrUpdown:	address = addrGround + 32;
	const addrFont:		address = addrUpdown + 64;
	const addrLetters:	address = addrFont + 512;

	// Virtual
	const addrNumbers:	address = addrFont + 384;

	// Include exported resources into binary at specified address
	carSprite: incbin("export/sprite_carbody.bin", addrCarBody);
	wheelSprite: incbin("export/sprite_wheel.bin", addrWheel);
	groundTile: incbin("export/sprite_ground.bin", addrGround);
	updownTile: incbin("export/sprite_updown.bin", addrUpdown);
	smallFont: incbin("export/font4x8.bin", addrFont);
	letterSprite: incbin("export/sprite_letters.bin", addrLetters);
	
	// Import music data. Made with Fisichella, song by Jojeli
	musicData: incbin("export/imono.bin", addrMusic);
	
	// Pre-shifted address-table for car body sprite
	carbody_L: array[] of integer = (
		addrCarBody, addrCarBody+24, addrCarBody+48, addrCarBody+72
	);
	carbody_M: array[] of integer = (
		addrCarBody+8, addrCarBody+32, addrCarBody+56, addrCarBody+80
	);
	carbody_R: array[] of integer = (
		addrCarBody+16, addrCarBody+40, addrCarBody+64, addrCarBody+88
	);
	
	// Address-table for ground tiles
	ground_T: array[] of integer = (
		addrGround, addrGround+8, addrGround+16, addrGround+24
	);

	// Address-table for up'n'down tiles
	updown_T: array[] of integer = (
		addrUpDown, addrUpDown+8, addrUpDown+16, addrUpDown+24,
		addrUpDown+32, addrUpDown+40, addrUpDown+48, addrUpDown+56
	);


	// Pre-shifter address-table for single wheel sprite
	wheel_L: array[] of integer = (
		addrWheel, addrWheel+16, addrWheel+32, addrWheel+48
	);
	wheel_R: array[] of integer = (
		addrWheel+8, addrWheel+24, addrWheel+40, addrWheel+56
	);

	level_up1: array[] of byte = (
		%00000001, 6,
		%00000011, 4,
		%00000010, 4,
		%00000000, 4,
		%00000000, 6,
		%00000010, 8,
		%00000001, 6,
		%00000011, 4,
		%00000000, 6,
		%00000010, 8
	); 

	// Misc constants
	const MULTICOLOR: byte = 8;

	// Draw tree index
	const d_car: 	byte = 0;
	const d_grnd:	byte = 1;
	const d_upper:	byte = 2;

	// State index
	const s_stat:	byte = 0;
	const s_move:	byte = 1;
	const s_jump:	byte = 2;

	// X direction while jumping
	const x_none:	byte = 0;
	const x_left:	byte = 1;
	const x_right:	byte = 2;

// Include variables. Defined in zeropage and cassette buffer
@include "variables.ras"

// External procedures
@include "musicplayer.ras"
@include "initvars.ras"

// This procedure is never actually called in the code, 
// it contains the "cartridge autostart signature" and jump
// address. block1 equals to main. This needs to be exactly
// in address $a000 for it to work.
@startblock $a000 "Block5"
procedure cartAutostart();
begin
	asm("
	dc.b <block1,>block1         ; Cart reset start address
	dc.b <restoreKey,>restoreKey ; Restore keypress jump address
	dc.b $41,$30,$c3,$c2,$cd     ; Signature for cart autostart (a0CBM)
	");
end;
@endblock

// This just adds the correct unrolled ASM into code, not really a procedure.
// Also tell compiler not to remove this
procedure initscreenshift();
begin
    vbmInitScreenShiftLeft(3);
end;


// Linear-feedback shift register
procedure lfsr();
begin
	asm("
lfsr_rnd
		lda lfsrval
		lsr
		bcc lfsr_noeor
		eor #$B4
lfsr_noeor
		sta lfsrval
	");
end;

procedure incdecground();
begin
	if (grndheight < updowntile) then dec(updowntile) else inc(updowntile);
end;


// Handle ground tile generation
//
procedure generate_ground();
begin
	if (grndheight = updowntile) then
	begin
		lfsr();
		grndheight := lfsrval >> 2 & 15;
	end
	else incdecground();
	drawTree[d_grnd] := 1;
end;

// Interrupt function that handles all the screen drawing
// starting from certain raster line to avoid flicker
//
procedure drawcar();
begin
	// Store the processors registers
	StartIRQ(0); 	

@ifdef SHOW_RASTER
	screen_bg_color := WHITE + SCREEN_BG_BLACK;
@endif

@ifdef PLAY_MUSIC
	// Play song
	asm("    jsr MusicPlay");
@endif

@ifdef SHOW_RASTER
	screen_bg_color := RED + SCREEN_BG_BLACK;
@endif

	// Clear previous car sprite
	vbmSetPosition2(buggy.old_x, buggy.old_y + buggy.old_y_off+2);
	vbmClearSprite2(carbody_L, carbody_M, carbody_R);
	
	// Clear old wheels
	vbmSetPosition2(buggy.old_x, buggy.old_wh_y + buggy.old_wl_y_off + 10);
	vbmClearSprite8(wheel_L, wheel_R);
	vbmSetPosition2(buggy.old_x+10, buggy.old_wh_y + buggy.old_wr_y_off + 10);
	vbmClearSprite8(wheel_L, wheel_R);


@ifdef SHOW_RASTER
	screen_bg_color := PURPLE + SCREEN_BG_BLACK;
@endif

	// Scroll ground
	vbmScreenShiftLeft(160,176);
	vbmScreenShiftLeft(160,176);

	// Scroll upper platform
	if (uscnt = 0) then
	begin
@ifdef SHOW_RASTER
	screen_bg_color := YELLOW + SCREEN_BG_BLACK;
@endif
		vbmScreenShiftLeft(90,96);
		vbmScreenShiftLeft(90,96);
	end;

	// Scroll middle platform
	if (uscnt = 2) then
	begin
@ifdef SHOW_RASTER
	screen_bg_color := GREEN + SCREEN_BG_BLACK;
@endif
		vbmScreenShiftLeft(128,134);
		vbmScreenShiftLeft(128,134);
	end;

@ifdef SHOW_RASTER
	screen_bg_color := RED + SCREEN_BG_BLACK;
@endif


	// Draw new ground piece
	if (drawTree[d_grnd] = 1 and gcnt = 0) then
	begin
		if (updowntile & 8) then
		begin
			vbmSetPosition2(152, 160);
			p1 := int2ptr(updown_T[updowntile - 8]);
			vbmDrawTile(p1);
			vbmSetPosition2(152, 168);
			p1 := int2ptr(ground_T[0]);
			vbmDrawTile(p1);
			drawTree[d_grnd] := 0;
		end
		else
		begin
			vbmSetPosition2(152, 160);
			p1 := int2ptr(ground_T[1]);
			vbmDrawTile(p1);
			vbmSetPosition2(152, 168);
			p1 := int2ptr(updown_T[updowntile]);
			vbmDrawTile(p1);
			drawTree[d_grnd] := 0;
		end;
	end;

	// Draw new upper level piece
	if (drawTree[d_upper] = 1 and ucnt = 0) then
	begin
		vbmSetPosition2(152, 128);
		uppertile := (upper1_dat & 1) + 1;
		p1 := int2ptr(ground_T[uppertile]);
		vbmDrawTile(p1);
		vbmSetPosition2(152, 90);
		uppertile := (upper1_dat & 2) + 1;
		p1 := int2ptr(ground_T[uppertile]);
		vbmDrawTile(p1);
		drawTree[d_upper] := 0;
	end;

	// Draw new car sprite
	vbmSetPosition2(buggy.x, buggy.y + buggy.y_off+2);
	vbmDrawSprite2(carbody_L, carbody_M, carbody_R);
	
	// Draw wheels
	vbmSetPosition2(buggy.x, buggy.wh_y + buggy.wl_y_off + 10);
	vbmDrawSprite8E(wheel_L, wheel_R);
	vbmSetPosition2(buggy.x + 10, buggy.wh_y + buggy.wr_y_off + 10);
	vbmDrawSprite8E(wheel_L, wheel_R);

	drawTree[d_car] := 0;
	buggy.old_x := buggy.x;
	buggy.old_y := buggy.y;
	buggy.old_y_off := buggy.y_off;
	buggy.old_wh_y := buggy.wh_y;
	buggy.old_wl_y_off := buggy.wl_y_off;
	buggy.old_wr_y_off := buggy.wr_y_off;

	// Increase counters
	inc(scnt);
	incrange(gcnt, 0, 3);
	incrange(mcnt, 0, 2);
	incrange(bcnt, 0, 3);
	incrange(ucnt, 0, 16);
	incrange(uscnt, 0, 4);

@ifdef SHOW_RASTER
	screen_bg_color := BLUE + SCREEN_BG_BLACK;
@endif

	// Restore the processor registers and complete our interrupt
	closeIRQ();
end;

// Limit buggy x movement
procedure limit_x();
begin
	if (buggy.x < 8) then buggy.x := 8;
	if (buggy.x > 120) then buggy.x := 120;
end;

// Move buggy right
procedure buggy_right(incamount:byte at $3a);
begin
	buggy.x := buggy.x + incamount;
	xdir := x_right;
end;

// Move buggy left
procedure buggy_left(decamount:byte at $3b);
begin
	buggy.x := buggy.x - decamount;
	xdir := x_left;
end;

// Jump suspension
procedure jumpsuspend();
begin
	// Suspension
	suspension[buggy.sus_y] := buggy.y;
	buggy.wh_y := suspension[buggy.sus_wy];
	incrange(buggy.sus_y, 0, 3);
	incrange(buggy.sus_wy, 0, 3);
end;

// Find ground offset at x+offset
procedure find_ground(xoffset:byte at $3c);
begin
	for i := 0 to 16 do if (vbmTestPixel2(buggy.x + xoffset, 159+i) = 0) then buggy.y_off := i;
end;


// Main body, handle all initialization and
// game logic and joystick controls.
begin
	// Initialize system when run as cartridge
	asm("
		; Disable interrupts
		sei
		; Run kernal setup routines.
		jsr $FD8D
		jsr $FD52
		jsr $FDF9
restoreKey:
		; Disable interrupts again (for Restore-key)
		sei
		jsr $E518
		; Reset stack pointer
		ldx #$ff
		txs
		; Prevent lower/uppercase swap
		lda #$80
		sta $0291
	");

	// Init variables
	initVariables();

	// Init music player
	musicplayer(1);

	// Initialize display mode to 19 column
	vbmSetDisplayMode(3);
//	vbmDebug(1);

	// Clear VBM
	vbmClear(0);
	
	// Clear color memory with WHITE and set MULTICOLOR flag
	vbmClearColor(WHITE + MULTICOLOR);
//	vbmClearColor(WHITE);
	
	// Set other colors, plus audio volume
	AUX_COLOR_AND_VOLUME := RED * 15 + 15;
	screen_bg_color := BLUE + SCREEN_BG_BLACK;

	// Draw "stars"
//	fori i := 0 to 4 do
//	begin
//		vbmDrawDot((random() >> 2) + 8, 40 + (i * 10));
//		vbmDrawDot((random() >> 2) + 88 , 40 + (i * 10));
//	end;

    // Draw "title" text
    vbmDrawSmallTextE(scoretitle, smallFont, 0, 0, 6);
    vbmDrawSmallTextE(buggycount, smallFont, 28, 0, 10);
    
	// Set upper two rows to hires single color
	fill(screen_col_loc, WHITE, 20);

	// Set up an raster interrupt to call outside visible screen,
	// params: IRQ function, raster line, PAL/NTSC (0/1)
	DisableVIC20IRQ();
	VIARasterIRQ(drawcar(), 120, 0);


	// Main game logic runs here in loop
	while(true) offpage do
	begin
		// Read joystick
		readjoy1();

		// Handle buggy drawing and moving when IRQ says the car has
		// been redrawn
		if (drawTree[d_car] = 0 and mcnt = 0) then
		begin
			case state of
				// Stationery
				s_stat:
					begin
						@ifdef SHOW_RASTER
							screen_bg_color := BLACK + SCREEN_BG_BLACK;
						@endif
						xdir := x_none;
						if (joy1 & JOY_RIGHT) then buggy_right(2);
						if (joy1 & JOY_LEFT) then buggy_left(2);
						if (joy1 & JOY_UP) then state := s_jump;
						drawTree[d_car] := 1;
						@ifdef SHOW_RASTER
							screen_bg_color := BLUE + SCREEN_BG_BLACK;
						@endif
					end;
				// In jump
				s_jump:
					begin
						@ifdef SHOW_RASTER
							screen_bg_color := BLACK + SCREEN_BG_BLACK;
						@endif
						if (xdir = x_right) then buggy_right(1);
						if (xdir = x_left) then buggy_left(1);
						if (jdir = 0) then buggy.y := buggy.y - 2 else buggy.y := buggy.y + 2;
						if (buggy.y < 94) then jdir := 1;
						if (buggy.y = 140) then
						begin
							jdir := 0;
							state := s_stat;
						end;

						drawTree[d_car] := 1;
						@ifdef SHOW_RASTER
							screen_bg_color := BLUE + SCREEN_BG_BLACK;
						@endif
					end;
			end;

			// make buggy stay inside limits			
			limit_x();

			// calculate new y offset for buggy and wheels
			find_ground(8);
			buggy.y_off := yoff;
			find_ground(4);
			buggy.wl_y_off := yoff;
			find_ground(14);
			buggy.wr_y_off := yoff;
			jumpsuspend();
		end;

		// Set up next ground tile when IRQ says ground needs new
		// tile
		if (drawTree[d_grnd] = 0) then generate_ground();

		// Set up next upper level tile when IRQ says we need one
		if (drawTree[d_upper] = 0) then
		begin
			dec(upper1_cnt);
			if (upper1_cnt = 0) then
			begin
				upper1_dat := level_up1[upper1_ind];
				upper1_cnt := level_up1[upper1_ind+1];
				inc(upper1_ind);
				incrange(upper1_ind, 0, 20);
			end;
			bcdadd(score, scoreadd, 3);
			vbmdrawsmallbcd(score, addrNumbers, 6, 0, 3);
			drawTree[d_upper] := 1;
		end;

	end;

end.
